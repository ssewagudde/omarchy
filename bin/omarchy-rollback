#!/bin/bash

# Omarchy Rollback Utility
# Restores backed up files and configurations

set -euo pipefail

# Colors for output
readonly RED='\033[0;31m'
readonly GREEN='\033[0;32m'
readonly YELLOW='\033[1;33m'
readonly BLUE='\033[0;34m'
readonly NC='\033[0m' # No Color

log_info() {
    echo -e "${BLUE}[INFO]${NC} $*" >&2
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $*" >&2
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $*" >&2
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $*" >&2
}

BACKUP_DIR="${OMARCHY_BACKUP_DIR:-$HOME/.omarchy-backup}"

show_usage() {
    cat << EOF
Usage: $(basename "$0") [OPTIONS]

Omarchy Rollback Utility - Restore backed up configurations

OPTIONS:
    -l, --list          List available backups
    -r, --restore FILE  Restore specific backup file
    -a, --restore-all   Restore all backed up files
    -c, --clean         Remove all backup files
    -h, --help          Show this help message

EXAMPLES:
    $(basename "$0") --list
    $(basename "$0") --restore ~/.zshrc
    $(basename "$0") --restore-all
    $(basename "$0") --clean

EOF
}

list_backups() {
    if [[ ! -d "$BACKUP_DIR" ]]; then
        log_info "No backup directory found at $BACKUP_DIR"
        return 0
    fi
    
    if [[ ! -f "$BACKUP_DIR/backup_list" ]]; then
        log_info "No backup list found"
        return 0
    fi
    
    log_info "Available backups in $BACKUP_DIR:"
    echo
    
    while IFS= read -r backup_file; do
        if [[ -f "$backup_file" ]]; then
            local original_file
            original_file=$(basename "$backup_file" | sed 's/\.[0-9]*$//')
            local backup_date
            backup_date=$(date -d "@$(basename "$backup_file" | grep -o '[0-9]*$')" 2>/dev/null || echo "unknown")
            
            echo "  $original_file -> $backup_file (created: $backup_date)"
        fi
    done < "$BACKUP_DIR/backup_list"
}

restore_file() {
    local backup_file="$1"
    
    if [[ ! -f "$backup_file" ]]; then
        log_error "Backup file not found: $backup_file"
        return 1
    fi
    
    # Extract original filename
    local original_file
    original_file=$(basename "$backup_file" | sed 's/\.[0-9]*$//')
    local target_path="$HOME/$original_file"
    
    # Handle special cases for config files
    case "$original_file" in
        .zshrc|.bashrc|.profile|.zprofile)
            target_path="$HOME/$original_file"
            ;;
        hyprland.conf)
            target_path="$HOME/.config/hypr/hyprland.conf"
            ;;
        mkinitcpio.conf)
            log_warning "System file $original_file requires manual restoration"
            log_info "Backup location: $backup_file"
            return 0
            ;;
        *)
            # Try to determine path from backup list context
            target_path="$HOME/$original_file"
            ;;
    esac
    
    log_info "Restoring $backup_file to $target_path"
    
    # Create backup of current file if it exists
    if [[ -f "$target_path" ]]; then
        cp "$target_path" "${target_path}.pre-rollback"
        log_info "Current file backed up to ${target_path}.pre-rollback"
    fi
    
    # Restore the file
    cp "$backup_file" "$target_path"
    log_success "Restored $target_path"
}

restore_all() {
    if [[ ! -f "$BACKUP_DIR/backup_list" ]]; then
        log_error "No backup list found"
        return 1
    fi
    
    log_info "Restoring all backed up files"
    
    while IFS= read -r backup_file; do
        if [[ -f "$backup_file" ]]; then
            restore_file "$backup_file"
        fi
    done < "$BACKUP_DIR/backup_list"
    
    log_success "All files restored"
}

clean_backups() {
    if [[ ! -d "$BACKUP_DIR" ]]; then
        log_info "No backup directory found"
        return 0
    fi
    
    log_warning "This will permanently delete all backup files"
    
    if command -v gum &>/dev/null; then
        if ! gum confirm "Are you sure you want to delete all backups?"; then
            log_info "Backup cleanup cancelled"
            return 0
        fi
    else
        read -p "Are you sure you want to delete all backups? (y/N): " -n 1 -r
        echo
        if [[ ! $REPLY =~ ^[Yy]$ ]]; then
            log_info "Backup cleanup cancelled"
            return 0
        fi
    fi
    
    rm -rf "$BACKUP_DIR"
    log_success "All backups deleted"
}

main() {
    if [[ $# -eq 0 ]]; then
        show_usage
        exit 1
    fi
    
    while [[ $# -gt 0 ]]; do
        case $1 in
            -l|--list)
                list_backups
                shift
                ;;
            -r|--restore)
                if [[ -z "${2:-}" ]]; then
                    log_error "Restore option requires a file argument"
                    exit 1
                fi
                restore_file "$2"
                shift 2
                ;;
            -a|--restore-all)
                restore_all
                shift
                ;;
            -c|--clean)
                clean_backups
                shift
                ;;
            -h|--help)
                show_usage
                exit 0
                ;;
            *)
                log_error "Unknown option: $1"
                show_usage
                exit 1
                ;;
        esac
    done
}

main "$@"